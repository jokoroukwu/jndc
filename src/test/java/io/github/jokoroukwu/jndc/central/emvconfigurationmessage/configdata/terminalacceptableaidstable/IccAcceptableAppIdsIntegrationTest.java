package io.github.jokoroukwu.jndc.central.emvconfigurationmessage.configdata.terminalacceptableaidstable;

import io.github.jokoroukwu.jndc.AppenderFactoryBase;
import io.github.jokoroukwu.jndc.NdcCharBuffer;
import io.github.jokoroukwu.jndc.central.CentralMessageClass;
import io.github.jokoroukwu.jndc.central.CentralMessagePreProcessor;
import io.github.jokoroukwu.jndc.central.emvconfigurationmessage.EmvConfigMessageSubClass;
import io.github.jokoroukwu.jndc.central.emvconfigurationmessage.EmvConfigurationMessage;
import io.github.jokoroukwu.jndc.central.emvconfigurationmessage.EmvConfigurationMessageAppender;
import org.assertj.core.api.Assertions;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import java.util.Map;

public class IccAcceptableAppIdsIntegrationTest implements TerminalAcceptableAidsTableMessageListener {
    private final String messageString =
            "80\u001C000\u001C5\u001C0007A00000000410100AMASTERCARDCAM0000000200100000001C849F099F339F349F35575A5F349F2" +
                    "79F269F10829F369F1E9A9C509F535F309F209F1A5F2A9F37959F029F035F209F0B05959B9F279F269F100307A0000000046" +
                    "00007A000000010103007A0000000043060000201\u001D0107A000000004306007MAESTROCAM0000000200100000001C8" +
                    "49F099F339F349F35575A5F349F279F269F10829F369F1E9A9C509F535F309F209F1A5F2A9F37959F029F035F209F0B059" +
                    "59B9F279F269F100207A000000004600007A0000000101030000201\u001D0207A000000004600006CIRRUSCAM00000002" +
                    "00000000001C849F099F339F349F35575A5F349F279F269F10829F369F1E9A9C509F535F309F209F1A5F2A9F37959F029F" +
                    "035F209F0B05959B9F279F269F100107A0000000101030000201\u001D0307A00000001010300AEUROCHEQUECAM0000000" +
                    "200100000001C849F099F339F349F35575A5F349F279F269F10829F369F1E9A9C509F535F309F209F1A5F2A9F37959F029" +
                    "F035F209F0B05959B9F279F269F1000000201\u001D0407A000000003101004VISACAM0000000200100000001C849F099F" +
                    "339F349F35575A5F349F279F269F10829F369F1E9A9C509F535F309F209F1A5F2A9F37959F029F035F209F0B05959B9F27" +
                    "9F269F100807A000000004101007A000000004306007A000000004600007A000000010103007A000000003101007A00000" +
                    "0003201007A000000432000107A0000000038010000201\u001D0507A000000003201008ELECTRONCAM000000020010000" +
                    "0001C849F099F339F349F35575A5F349F279F269F10829F369F1E9A9C509F535F309F209F1A5F2A9F37959F029F035F209" +
                    "F0B05959B9F279F269F1000000201\u001D0607A000000432000106PRO100CAM0000000200000000001F849F099F339F34" +
                    "9F35575A5F349F279F269F10829F369F1E9A9C509F535F309F209F1A5F2A9F37959F029F03DF36DF26DF345F209F0B0595" +
                    "9B9F279F269F1000000201\u001D0707A000000003801004PLUSCAM0000000200100000001C849F099F339F349F35575A5" +
                    "F349F279F269F10829F369F1E9A9C509F535F309F209F1A5F2A9F37959F029F035F209F0B05959B9F279F269F100000020" +
                    "1\u001D0807A000000658101003ISTCAM0000000200100000001C849F099F339F349F35575A5F349F279F269F10829F369" +
                    "F1E9A9C509F535F309F209F1A5F2A9F37959F029F035F209F0B05959B9F279F269F100107A0000006581010000201\u001D" +
                    "0907A000000658201003ISTCAM0000000200100000001C849F099F339F349F35575A5F349F279F269F10829F369F1E9A9C" +
                    "509F535F309F209F1A5F2A9F37959F029F035F209F0B05959B9F279F269F100107A0000006582010000201\u001D0A08A0" +
                    "0000033301010108CUPDEBITCAM0000000200100000001C849F099F339F349F35575A5F349F279F269F10829F369F1E9A9" +
                    "C509F535F309F209F1A5F2A9F37959F029F035F209F0B05959B9F279F269F100308A00000033301010108A000000333010" +
                    "10208A000000333010103000201\u001D0B08A00000033301010209CUPCREDITCAM0000000200100000001C849F099F339" +
                    "F349F35575A5F349F279F269F10829F369F1E9A9C509F535F309F209F1A5F2A9F37959F029F035F209F0B05959B9F279F2" +
                    "69F100308A00000033301010108A00000033301010208A000000333010103000201\u001D0C08A0000003330101030ACUP" +
                    "QNULLOFCAM0000000200100000001C849F099F339F349F35575A5F349F279F269F10829F369F1E9A9C509F535F309F209F" +
                    "1A5F2A9F37959F029F035F209F0B05959B9F279F269F100308A00000033301010108A00000033301010208A00000033301" +
                    "0103000201\u001D0D07A000000658209903ISTCAM0000000200100000001C849F099F339F349F35575A5F349F279F269F" +
                    "10829F369F1E9A9C509F535F309F209F1A5F2A9F37959F029F035F209F0B05959B9F279F269F100107A000000658209900" +
                    "0201\u001D0E07A000000658109903ISTCAM0000000200100000001C849F099F339F349F35575A5F349F279F269F10829F" +
                    "369F1E9A9C509F535F309F209F1A5F2A9F37959F029F035F209F0B05959B9F279F269F100107A0000006581099000201";

    private EmvConfigurationMessage<IccTerminalAcceptableAppIdsTable> message;
    private CentralMessagePreProcessor centralMessageProcessor;

    @Override
    public void onTerminalAcceptableAidsTableMessage(EmvConfigurationMessage<IccTerminalAcceptableAppIdsTable> message) {
        this.message = message;
    }

    @BeforeMethod
    public void setUp() {
        centralMessageProcessor = new CentralMessagePreProcessor(new AppenderFactoryBase<>(Map.of(CentralMessageClass.EMV_CONFIGURATION,
                new EmvConfigurationMessageAppender(new AppenderFactoryBase<>(Map.of(EmvConfigMessageSubClass.TERMINAL_ACCEPTABLE_AIDS,
                        new TerminalAcceptableAidsTableAppender(this)))))));
    }

    @Test
    public void should_return_same_ndc_string() {
        centralMessageProcessor.processMessage(NdcCharBuffer.wrap(messageString));
        Assertions.assertThat(message.toNdcString())
                .isEqualTo(messageString);
    }

}
